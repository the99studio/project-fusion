import { describe, it, expect } from 'vitest';
import { TextOutputStrategy, MarkdownOutputStrategy, HtmlOutputStrategy } from '../src/strategies/output-strategy.js';
import type { OutputContext } from '../src/types.js';
import { defaultConfig } from '../src/utils.js';

describe('GitHub Link Security', () => {
    const context: OutputContext = {
        projectTitle: 'Test Project',
        versionInfo: ' v1.0.0',
        config: defaultConfig,
        filesToProcess: [],
        toolVersion: '1.2.3'
    };

    describe('Text Output', () => {
        const strategy = new TextOutputStrategy();
        
        it('should include GitHub URL as plain text (not clickable)', () => {
            const header = strategy.generateHeader(context);
            
            // Should contain the full GitHub URL as plain text
            expect(header).toContain('# GitHub: https://github.com/the99studio/project-fusion');
            // Should include version
            expect(header).toContain('# Generated by: project-fusion v1.2.3');
        });

        it('should handle missing toolVersion', () => {
            const contextNoVersion = { ...context, toolVersion: undefined };
            const header = strategy.generateHeader(contextNoVersion);
            
            // Should still include GitHub URL
            expect(header).toContain('# GitHub: https://github.com/the99studio/project-fusion');
            // Should not have version
            expect(header).toContain('# Generated by: project-fusion\n');
        });
    });

    describe('Markdown Output', () => {
        const strategy = new MarkdownOutputStrategy();
        
        it('should include clickable GitHub link with proper markdown syntax', () => {
            const header = strategy.generateHeader(context);
            
            // Should contain markdown link syntax
            expect(header).toContain('[project-fusion v1.2.3](https://github.com/the99studio/project-fusion)');
            // Should be in the Generated by line
            expect(header).toContain('**Generated by:** [project-fusion v1.2.3](https://github.com/the99studio/project-fusion)');
        });

        it('should handle missing toolVersion in markdown', () => {
            const contextNoVersion = { ...context, toolVersion: undefined };
            const header = strategy.generateHeader(contextNoVersion);
            
            // Should still have clickable link without version
            expect(header).toContain('[project-fusion](https://github.com/the99studio/project-fusion)');
        });
    });

    describe('HTML Output', () => {
        const strategy = new HtmlOutputStrategy();
        
        it('should include secure external link with all security attributes', () => {
            const header = strategy.generateHeader(context);
            
            // Should contain anchor tag with href
            expect(header).toContain('<a href="https://github.com/the99studio/project-fusion"');
            // Should open in new tab
            expect(header).toContain('target="_blank"');
            // Should have security attributes
            expect(header).toContain('rel="noopener noreferrer"');
            // Should include version in link text
            expect(header).toContain('>project-fusion v1.2.3</a>');
        });

        it('should have proper structure for the link line', () => {
            const header = strategy.generateHeader(context);
            
            // Should be in a paragraph with proper label
            expect(header).toContain('<p><strong>Created with:</strong> <a href="https://github.com/the99studio/project-fusion" target="_blank" rel="noopener noreferrer">project-fusion v1.2.3</a></p>');
        });

        it('should handle missing toolVersion in HTML', () => {
            const contextNoVersion = { ...context, toolVersion: undefined };
            const header = strategy.generateHeader(contextNoVersion);
            
            // Should still have secure link without version
            expect(header).toContain('>project-fusion</a>');
            // Should still have security attributes
            expect(header).toContain('rel="noopener noreferrer"');
        });

        it('should prevent tabnabbing attack with noopener', () => {
            const header = strategy.generateHeader(context);
            
            // noopener prevents window.opener access
            expect(header).toContain('rel="noopener');
            // This is critical for security when using target="_blank"
            expect(header).toMatch(/target="_blank"[^>]*rel="[^"]*noopener/);
        });

        it('should prevent referrer leakage with noreferrer', () => {
            const header = strategy.generateHeader(context);
            
            // noreferrer prevents sending referrer header
            expect(header).toContain('noreferrer');
            // Both attributes should be present together
            expect(header).toMatch(/rel="noopener noreferrer"/);
        });
    });

    describe('Cross-format consistency', () => {
        it('should all reference the same GitHub URL', () => {
            const textStrategy = new TextOutputStrategy();
            const markdownStrategy = new MarkdownOutputStrategy();
            const htmlStrategy = new HtmlOutputStrategy();
            
            const textHeader = textStrategy.generateHeader(context);
            const markdownHeader = markdownStrategy.generateHeader(context);
            const htmlHeader = htmlStrategy.generateHeader(context);
            
            const githubUrl = 'https://github.com/the99studio/project-fusion';
            
            // All formats should include the same URL
            expect(textHeader).toContain(githubUrl);
            expect(markdownHeader).toContain(githubUrl);
            expect(htmlHeader).toContain(githubUrl);
        });

        it('should all include version when provided', () => {
            const textStrategy = new TextOutputStrategy();
            const markdownStrategy = new MarkdownOutputStrategy();
            const htmlStrategy = new HtmlOutputStrategy();
            
            const textHeader = textStrategy.generateHeader(context);
            const markdownHeader = markdownStrategy.generateHeader(context);
            const htmlHeader = htmlStrategy.generateHeader(context);
            
            // All should mention the version
            expect(textHeader).toContain('v1.2.3');
            expect(markdownHeader).toContain('v1.2.3');
            expect(htmlHeader).toContain('v1.2.3');
        });
    });
});